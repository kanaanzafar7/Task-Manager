//
//  TaskDetailsPresenter.swift
//  clean swift experiments
//
//  Created by Kanaan Zafar on 25/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TaskDetailsPresentationLogic
{
  func presentSomething(response: TaskDetails.Something.Response)
  func taskDeletionComplete(response: TaskDetails.DeleteTask.Response)
  func taskUpdationComplete(response: TaskDetails.UpdateTask.Response)
}

class TaskDetailsPresenter: TaskDetailsPresentationLogic
{
  weak var viewController: TaskDetailsDisplayLogic?
  
  // MARK: - Methods
  
  func presentSomething(response: TaskDetails.Something.Response)
  {
    let viewModel = TaskDetails.Something.ViewModel()
    viewController?.displaySomething(viewModel: viewModel)
  }
    func taskDeletionComplete(response: TaskDetails.DeleteTask.Response) {
        print("-----taskdeletionPresenter:")
        if let error = response.error {
            let viewModel = TaskDetails.DeleteTask.TaskDeletionFailed(error: error)
            viewController?.displayTaskDeletionFailed(viewModel: viewModel)
        } else {
            let viewModel = TaskDetails.DeleteTask.TaskDeletedSuccessfully()
            viewController?.displayTaskDeletedSuccessfully(viewModel: viewModel)
        }
    }
    func taskUpdationComplete(response: TaskDetails.UpdateTask.Response) {
        if let errorProduced  =  response.error {
            let viewModel = TaskDetails.UpdateTask.TaskUpdationFailed(error: errorProduced)
            viewController?.displayTaskUpdationFailed(viewModel: viewModel)
        } else {
            let viewModel = TaskDetails.UpdateTask.TaskUpdatedSuccessfully()
//            viewController?.TasksDeta(viewModel: viewModel)
            viewController?.displayTaskUpdatedSuccessfully(viewModel: viewModel)
        }
    }
}
